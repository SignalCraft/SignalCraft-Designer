[
    {
        "displayName": "Addition",
        "inputs": [
            {
                "key": "input1",
                "value": 4
            },
            {
                "key": "input2",
                "value": 4
            }
        ],
        "name": "addition",
        "options": [
        ],
        "outputs": [
            {
                "key": "sum",
                "value": 4
            }
        ],
		"overloadType": 1,
		"parseTree": "(stmt-list (set sum (+ input1 input2)))",
		"storage": [
		]
    },
    {
        "displayName": "Multiplication",
        "inputs": [
            {
                "key": "input1",
                "value": 4
            },
            {
                "key": "input2",
                "value": 4
            }
        ],
        "name": "multiplication",
        "options": [
        ],
        "outputs": [
            {
                "key": "product",
                "value": 4
            }
        ],
		"overloadType": 1,
		"parseTree": "(stmt-list (set product (* input1 input2)))",
		"storage": [
		]
    },
    {
        "displayName": "Analog Constant",
        "inputs": [
        ],
        "name": "analog_constant",
        "options": [
            {
                "key": "value",
                "value": {
                    "defaultValue": "0",
                    "displayName": "Value",
                    "maximum": 99,
                    "minimum": -99,
                    "type": 2
                }
            }
        ],
        "outputs": [
            {
                "key": "value",
                "value": 2
            }
        ],
		"overloadType": 0,
		"parseTree": "(stmt-list (set value options.value))",
		"storage": [
		]
    },
    {
        "displayName": "Analog Input",
        "inputs": [
        ],
        "name": "analog_input",
        "options": [
            {
                "key": "channel",
                "value": {
                    "choices": [
                        {
                            "key": "1",
                            "value": "0"
                        },
                        {
                            "key": "2",
                            "value": "1"
                        },
                        {
                            "key": "3",
                            "value": "2"
                        },
                        {
                            "key": "4",
                            "value": "3"
                        }
                    ],
                    "defaultValue": "0",
                    "displayName": "Input channel",
                    "type": 1
                }
            }
        ],
        "outputs": [
            {
                "key": "value",
                "value": 2
            }
        ],
		"overloadType": 0,
		"parseTree": "(stmt-list (set value (read_adc options.channel)))",
		"storage": [
		]
    },
    {
        "displayName": "Analog Output",
        "inputs": [
            {
                "key": "value",
                "value": 4
            }
        ],
        "name": "analog_output",
        "options": [
            {
                "key": "channel",
                "value": {
                    "choices": [
                        {
                            "key": "1",
                            "value": "0"
                        },
                        {
                            "key": "2",
                            "value": "1"
                        },
                        {
                            "key": "3",
                            "value": "2"
                        },
                        {
                            "key": "4",
                            "value": "3"
                        }
                    ],
                    "defaultValue": "0",
                    "displayName": "Output channel",
                    "type": 1
                }
            }
        ],
        "outputs": [
        ],
		"overloadType": 1,
		"parseTree": "(stmt-list (write_dac options.channel value))",
		"storage": [
		]
    },
    {
        "displayName": "Saturation",
        "inputs": [
            {
                "key": "input",
                "value": 4
            }
        ],
        "name": "saturation",
        "options": [
            {
                "key": "high_limit",
                "value": {
                    "defaultValue": "10",
                    "displayName": "High limit",
                    "maximum": 32767,
                    "minimum": -32768,
                    "type": 2
                }
            },
            {
                "key": "low_limit",
                "value": {
                    "defaultValue": "-10",
                    "displayName": "Low limit",
                    "maximum": 32767,
                    "minimum": -32768,
                    "type": 2
                }
            }
        ],
        "outputs": [
            {
                "key": "output",
                "value": 4
            }
        ],
		"overloadType": 1,
		"parseTree": "(stmt-list (set output (if (> input 0.5) 0.5 (if (< input -0.5) -0.5 input))))",
		"storage": [
		]
    },
    {
        "displayName": "Low Pass Filter",
        "inputs": [
            {
                "key": "in",
                "value": 4
            }
        ],
        "name": "low_pass_filter",
        "options": [
            {
                "key": "factor",
                "value": {
                    "defaultValue": "0.95",
                    "displayName": "Factor",
                    "maximum": 1,
                    "minimum": 0,
                    "type": 2
                }
            }
        ],
        "outputs": [
	    {
		"key": "out",
                "value": 4
	    }
        ],
		"overloadType": 1,
		"parseTree": "(stmt-list (set acc (+ (* acc 0.99) (* in (- 1 0.01)))) (set out acc))",
		"storage": [
			{
				"key": "acc",
				"value": 4
			}
		]
    },
    {
        "displayName": "High Pass Filter",
        "inputs": [
            {
                "key": "in",
                "value": 4
            }
        ],
        "name": "high_pass_filter",
        "options": [
            {
                "key": "factor",
                "value": {
                    "defaultValue": "0.95",
                    "displayName": "Factor",
                    "maximum": 1,
                    "minimum": 0,
                    "type": 2
                }
            }
        ],
        "outputs": [
	    {
		"key": "out",
                "value": 4
	    }
        ],
		"overloadType": 1,
		"parseTree": "(stmt-list (set acc (+ (* acc 0.99) (* in (- 1 0.01)))) (set out (- in acc)))",
		"storage": [
			{
				"key": "acc",
				"value": 4
			}
		]
    },
    {
        "displayName": "Peak",
        "inputs": [
            {
                "key": "input1",
                "value": 4
            }
        ],
        "name": "peak",
        "options": [
        ],
        "outputs": [
            {
                "key": "peak",
                "value": 4
            }
        ],
		"overloadType": 1,
		"parseTree": "(stmt-list (set stored_peak (if (> input1 stored_peak) input1 stored_peak)) (set peak stored_peak))",
		"storage": [
			{
				"key": "stored_peak",
				"value": 4
			}
		]
    },
	{
        "displayName": "RMS",
        "inputs": [
            {
                "key": "input",
                "value": 4
            }
        ],
        "name": "rms",
        "options": [
        ],
        "outputs": [
            {
                "key": "output",
                "value": 4
            }
        ],
		"overloadType": 1,
		"parseTree": "(stmt-list (set stored_ms (+ (* 0.999 stored_ms) (* 0.001 (* input input)))) (set output (sqrt stored_ms)))",
		"storage": [
			{
				"key": "stored_ms",
				"value": 4
			}
		]
    }
]
